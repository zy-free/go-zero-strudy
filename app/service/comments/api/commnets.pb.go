// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commnets.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BatchCommentsReq struct {
	RoomId               int64    `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Page                 int64    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size                 int64    `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchCommentsReq) Reset()         { *m = BatchCommentsReq{} }
func (m *BatchCommentsReq) String() string { return proto.CompactTextString(m) }
func (*BatchCommentsReq) ProtoMessage()    {}
func (*BatchCommentsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12bc9f80100b3cb, []int{0}
}

func (m *BatchCommentsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCommentsReq.Unmarshal(m, b)
}
func (m *BatchCommentsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCommentsReq.Marshal(b, m, deterministic)
}
func (m *BatchCommentsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCommentsReq.Merge(m, src)
}
func (m *BatchCommentsReq) XXX_Size() int {
	return xxx_messageInfo_BatchCommentsReq.Size(m)
}
func (m *BatchCommentsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCommentsReq.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCommentsReq proto.InternalMessageInfo

func (m *BatchCommentsReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *BatchCommentsReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *BatchCommentsReq) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type BatchCommentsResp struct {
	Comments             []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	TotalPage            int64      `protobuf:"varint,2,opt,name=totalPage,proto3" json:"totalPage,omitempty"`
	TotalSize            int64      `protobuf:"varint,3,opt,name=totalSize,proto3" json:"totalSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BatchCommentsResp) Reset()         { *m = BatchCommentsResp{} }
func (m *BatchCommentsResp) String() string { return proto.CompactTextString(m) }
func (*BatchCommentsResp) ProtoMessage()    {}
func (*BatchCommentsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12bc9f80100b3cb, []int{1}
}

func (m *BatchCommentsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCommentsResp.Unmarshal(m, b)
}
func (m *BatchCommentsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCommentsResp.Marshal(b, m, deterministic)
}
func (m *BatchCommentsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCommentsResp.Merge(m, src)
}
func (m *BatchCommentsResp) XXX_Size() int {
	return xxx_messageInfo_BatchCommentsResp.Size(m)
}
func (m *BatchCommentsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCommentsResp.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCommentsResp proto.InternalMessageInfo

func (m *BatchCommentsResp) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *BatchCommentsResp) GetTotalPage() int64 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *BatchCommentsResp) GetTotalSize() int64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

type CreateCommentReq struct {
	RoomId               int64    `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Avatar               string   `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Nickname             string   `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Content              string   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCommentReq) Reset()         { *m = CreateCommentReq{} }
func (m *CreateCommentReq) String() string { return proto.CompactTextString(m) }
func (*CreateCommentReq) ProtoMessage()    {}
func (*CreateCommentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12bc9f80100b3cb, []int{2}
}

func (m *CreateCommentReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCommentReq.Unmarshal(m, b)
}
func (m *CreateCommentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCommentReq.Marshal(b, m, deterministic)
}
func (m *CreateCommentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCommentReq.Merge(m, src)
}
func (m *CreateCommentReq) XXX_Size() int {
	return xxx_messageInfo_CreateCommentReq.Size(m)
}
func (m *CreateCommentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCommentReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCommentReq proto.InternalMessageInfo

func (m *CreateCommentReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *CreateCommentReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateCommentReq) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *CreateCommentReq) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *CreateCommentReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type CreateCommentResp struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCommentResp) Reset()         { *m = CreateCommentResp{} }
func (m *CreateCommentResp) String() string { return proto.CompactTextString(m) }
func (*CreateCommentResp) ProtoMessage()    {}
func (*CreateCommentResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12bc9f80100b3cb, []int{3}
}

func (m *CreateCommentResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCommentResp.Unmarshal(m, b)
}
func (m *CreateCommentResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCommentResp.Marshal(b, m, deterministic)
}
func (m *CreateCommentResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCommentResp.Merge(m, src)
}
func (m *CreateCommentResp) XXX_Size() int {
	return xxx_messageInfo_CreateCommentResp.Size(m)
}
func (m *CreateCommentResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCommentResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCommentResp proto.InternalMessageInfo

func (m *CreateCommentResp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Comment struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Avatar               string   `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	UserId               int64    `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Nickname             string   `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Content              string   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	RoomId               int64    `protobuf:"varint,6,opt,name=roomId,proto3" json:"roomId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12bc9f80100b3cb, []int{4}
}

func (m *Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment.Unmarshal(m, b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return xxx_messageInfo_Comment.Size(m)
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Comment) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Comment) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Comment) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func init() {
	proto.RegisterType((*BatchCommentsReq)(nil), "api.BatchCommentsReq")
	proto.RegisterType((*BatchCommentsResp)(nil), "api.BatchCommentsResp")
	proto.RegisterType((*CreateCommentReq)(nil), "api.CreateCommentReq")
	proto.RegisterType((*CreateCommentResp)(nil), "api.CreateCommentResp")
	proto.RegisterType((*Comment)(nil), "api.Comment")
}

func init() { proto.RegisterFile("commnets.proto", fileDescriptor_d12bc9f80100b3cb) }

var fileDescriptor_d12bc9f80100b3cb = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x4f, 0x02, 0x31,
	0x14, 0x4c, 0x77, 0x71, 0x81, 0x07, 0x12, 0x78, 0x89, 0xa4, 0x21, 0x1e, 0xc8, 0x7a, 0xe1, 0xc4,
	0x01, 0xcf, 0x7a, 0x80, 0x13, 0x37, 0xb2, 0xfe, 0x82, 0xba, 0x34, 0xda, 0x68, 0x3f, 0xdc, 0x56,
	0x13, 0xfd, 0x0d, 0x1e, 0xbc, 0xf9, 0x77, 0x0d, 0xb5, 0xec, 0x97, 0xc6, 0x83, 0xb7, 0xce, 0xcc,
	0xf6, 0xbd, 0xd9, 0x99, 0xc2, 0x28, 0xd7, 0x52, 0x2a, 0xee, 0xec, 0xd2, 0x14, 0xda, 0x69, 0x8c,
	0x99, 0x11, 0x69, 0x06, 0xe3, 0x35, 0x73, 0xf9, 0xfd, 0x46, 0x4b, 0xc9, 0x95, 0xb3, 0x19, 0x7f,
	0xc2, 0x29, 0x24, 0x85, 0xd6, 0x72, 0xbb, 0xa7, 0x64, 0x4e, 0x16, 0x71, 0x16, 0x10, 0x22, 0x74,
	0x0c, 0xbb, 0xe3, 0x34, 0xf2, 0xac, 0x3f, 0x1f, 0x38, 0x2b, 0xde, 0x38, 0x8d, 0xbf, 0xb9, 0xc3,
	0x39, 0x7d, 0x85, 0x49, 0x6b, 0xa6, 0x35, 0xb8, 0x80, 0x5e, 0x1e, 0x30, 0x25, 0xf3, 0x78, 0x31,
	0x58, 0x0d, 0x97, 0xcc, 0x88, 0x65, 0xf8, 0x28, 0x2b, 0x55, 0x3c, 0x87, 0xbe, 0xd3, 0x8e, 0x3d,
	0xee, 0xaa, 0x5d, 0x15, 0x51, 0xaa, 0x37, 0xd5, 0xd6, 0x8a, 0x48, 0x3f, 0x08, 0x8c, 0x37, 0x05,
	0x67, 0x8e, 0x1f, 0xe7, 0xfe, 0xf1, 0x3f, 0x53, 0x48, 0x9e, 0x2d, 0x2f, 0xb6, 0xfb, 0xb0, 0x25,
	0xa0, 0x03, 0xcf, 0x5e, 0x98, 0x63, 0x85, 0x9f, 0xdf, 0xcf, 0x02, 0xc2, 0x19, 0xf4, 0x94, 0xc8,
	0x1f, 0x14, 0x93, 0x9c, 0x76, 0xbc, 0x52, 0x62, 0xa4, 0xd0, 0xcd, 0xb5, 0x72, 0x5c, 0x39, 0x7a,
	0xe2, 0xa5, 0x23, 0x4c, 0x2f, 0x60, 0xd2, 0x72, 0x64, 0x0d, 0x8e, 0x20, 0x12, 0x47, 0x3b, 0x91,
	0xd8, 0xa7, 0x9f, 0x04, 0xba, 0x41, 0x6f, 0x6b, 0x35, 0x3b, 0x51, 0xc3, 0x4e, 0x65, 0x3f, 0x6e,
	0xd8, 0xff, 0x97, 0xcd, 0x5a, 0x48, 0x49, 0x3d, 0xa4, 0xd5, 0x3b, 0x81, 0x41, 0x59, 0xe4, 0x6e,
	0x83, 0x57, 0x30, 0x5c, 0x33, 0x57, 0x76, 0x8b, 0x67, 0xbe, 0xc5, 0xf6, 0x1b, 0x9a, 0x4d, 0x7f,
	0xa3, 0xad, 0xc1, 0x6b, 0x38, 0x6d, 0xa4, 0x11, 0xee, 0xb7, 0x3b, 0x0b, 0xf7, 0x7f, 0x04, 0x77,
	0x9b, 0xf8, 0xb7, 0x7b, 0xf9, 0x15, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x4f, 0x60, 0x0d, 0xcd, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommentsRPCClient is the client API for CommentsRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentsRPCClient interface {
	BathComments(ctx context.Context, in *BatchCommentsReq, opts ...grpc.CallOption) (*BatchCommentsResp, error)
	CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentResp, error)
}

type commentsRPCClient struct {
	cc *grpc.ClientConn
}

func NewCommentsRPCClient(cc *grpc.ClientConn) CommentsRPCClient {
	return &commentsRPCClient{cc}
}

func (c *commentsRPCClient) BathComments(ctx context.Context, in *BatchCommentsReq, opts ...grpc.CallOption) (*BatchCommentsResp, error) {
	out := new(BatchCommentsResp)
	err := c.cc.Invoke(ctx, "/api.CommentsRPC/BathComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsRPCClient) CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentResp, error) {
	out := new(CreateCommentResp)
	err := c.cc.Invoke(ctx, "/api.CommentsRPC/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentsRPCServer is the server API for CommentsRPC service.
type CommentsRPCServer interface {
	BathComments(context.Context, *BatchCommentsReq) (*BatchCommentsResp, error)
	CreateComment(context.Context, *CreateCommentReq) (*CreateCommentResp, error)
}

// UnimplementedCommentsRPCServer can be embedded to have forward compatible implementations.
type UnimplementedCommentsRPCServer struct {
}

func (*UnimplementedCommentsRPCServer) BathComments(ctx context.Context, req *BatchCommentsReq) (*BatchCommentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BathComments not implemented")
}
func (*UnimplementedCommentsRPCServer) CreateComment(ctx context.Context, req *CreateCommentReq) (*CreateCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}

func RegisterCommentsRPCServer(s *grpc.Server, srv CommentsRPCServer) {
	s.RegisterService(&_CommentsRPC_serviceDesc, srv)
}

func _CommentsRPC_BathComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCommentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsRPCServer).BathComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CommentsRPC/BathComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsRPCServer).BathComments(ctx, req.(*BatchCommentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsRPC_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsRPCServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CommentsRPC/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsRPCServer).CreateComment(ctx, req.(*CreateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentsRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CommentsRPC",
	HandlerType: (*CommentsRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BathComments",
			Handler:    _CommentsRPC_BathComments_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _CommentsRPC_CreateComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commnets.proto",
}
